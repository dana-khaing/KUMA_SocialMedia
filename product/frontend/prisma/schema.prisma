generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String          @id
  username               String          @unique
  avatar                 String?
  cover                  String?
  name                   String?
  surname                String?
  dob                    DateTime?
  city                   String?
  bio                    String?
  school                 String?
  work                   String?
  website                String?
  createdAt              DateTime        @default(now())
  blocksReceived         Block[]         @relation("BlockerReceived")
  blocksSent             Block[]         @relation("BlockersSent")
  comments               Comment[]
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followings             Follower[]      @relation("UserFollowers")
  followers              Follower[]      @relation("UserFollowings")
  likes                  Like[]
  loves                  Love[]
  posts                  Post[]
  stories                Story[]
}

model Post {
  id        Int         @id @default(autoincrement())
  desc      String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  comments  Comment[]
  likes     Like[]
  loves     Love[]
  user      User        @relation(fields: [userId], references: [id])
  images    PostImage[] // New relation for multiple images

  @@index([userId], map: "Post_userId_fkey")
}

model PostImage {
  id        Int      @id @default(autoincrement())
  url       String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([postId], map: "PostImage_postId_fkey")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int?
  commentId Int?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId], map: "Like_commentId_fkey")
  @@index([postId], map: "Like_postId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}

model Love {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId], map: "Love_postId_fkey")
  @@index([userId], map: "Love_userId_fkey")
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  userId    String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([postId], map: "Comment_postId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model Story {
  id        Int      @id @default(autoincrement())
  image     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Story_userId_fkey")
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId], map: "Follower_followerId_fkey")
  @@index([followingId], map: "Follower_followingId_fkey")
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([receiverId], map: "FollowRequest_receiverId_fkey")
  @@index([senderId], map: "FollowRequest_senderId_fkey")
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockerId String
  blockedId String
  blocked   User     @relation("BlockerReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("BlockersSent", fields: [blockerId], references: [id], onDelete: Cascade)

  @@index([blockedId], map: "Block_blockedId_fkey")
  @@index([blockerId], map: "Block_blockerId_fkey")
}